// Generated by Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
#ifndef DRACOSDK_SWIFT_H
#define DRACOSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="DracoSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class DracoInspectorStatus;
@protocol DracoDecisionDelegate;
@class NSString;
@class UIView;

SWIFT_PROTOCOL("_TtP8DracoSDK13DracoProtocol_")
@protocol DracoProtocol
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DracoInspectorStatus * _Nonnull status;)
+ (DracoInspectorStatus * _Nonnull)status SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <DracoDecisionDelegate> _Nullable delegate;)
+ (id <DracoDecisionDelegate> _Nullable)delegate SWIFT_WARN_UNUSED_RESULT;
+ (void)setDelegate:(id <DracoDecisionDelegate> _Nullable)newValue;
/// Starts the Draco SDK. Call this method as early as possible to reduce latency on the first decision request. A client Id string is expected.
/// Calls statusHandler when the SDK is fully set up or if it fails.
+ (void)startWithClientId:(NSString * _Nonnull)clientId statusHandler:(void (^ _Nullable)(DracoInspectorStatus * _Nonnull))statusHandler;
+ (void)kill;
+ (NSString * _Nonnull)getVersion SWIFT_WARN_UNUSED_RESULT;
+ (void)startEventInspector;
+ (void)killEventInspector;
/// Asks Draco to start tracking the user interaction on a collection of views.
/// \param views an Array with the views to be tracked
///
+ (void)trackViews:(NSArray<UIView *> * _Nonnull)views;
/// Asks Draco to start tracking the user interaction on a collection of views.
/// \param views a dictionary with views (values) with their custom identifiers (keys)
///
+ (void)trackViewsWithIdentifiers:(NSDictionary<NSString *, UIView *> * _Nonnull)views;
/// Asks Draco to start tracking the user interaction on a single instance of UIView (or any of its subclasses). The identifier will identify the view in the information of each tracked event
/// \param view the view to be tracked
///
/// \param identifier Provides a unique identifier for the view, to be used in the events information
///
+ (void)trackView:(UIView * _Nonnull)view identifier:(NSString * _Nonnull)identifier;
/// Asks Draco to start tracking the user interaction on a single instance of UIView (or any of its subclasses). Custom identifier is not provided in this version of the function, so the eventInspector will use a default identifier. (It will be the accessibilityIdentifier of the view, if any, or its objectIdentifier as String. Keep in mind that if the object identifier is used, it will be unique for the entire life cycle of the view, but it will change every time the view is instantiated again
/// \param view the view to be tracked
///
+ (void)trackView:(UIView * _Nonnull)view;
@end


SWIFT_CLASS("_TtC8DracoSDK5Draco")
@interface Draco : NSObject <DracoProtocol>
+ (NSString * _Nonnull)getVersion SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DracoInspectorStatus * _Nonnull status;)
+ (DracoInspectorStatus * _Nonnull)status SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <DracoDecisionDelegate> _Nullable delegate;)
+ (id <DracoDecisionDelegate> _Nullable)delegate SWIFT_WARN_UNUSED_RESULT;
+ (void)setDelegate:(id <DracoDecisionDelegate> _Nullable)value;
+ (void)startWithClientId:(NSString * _Nonnull)clientId statusHandler:(void (^ _Nullable)(DracoInspectorStatus * _Nonnull))statusHandler;
+ (void)kill;
+ (void)startEventInspector;
+ (void)killEventInspector;
/// Asks Draco to start tracking the user interaction on a collection of views.
/// \param views an Array with the views to be tracked
///
+ (void)trackViews:(NSArray<UIView *> * _Nonnull)views;
/// Asks Draco to start tracking the user interaction on a collection of views.
/// \param views a dictionary with views (values) with their custom identifiers (keys)
///
+ (void)trackViewsWithIdentifiers:(NSDictionary<NSString *, UIView *> * _Nonnull)views;
/// Asks Draco to start tracking the user interaction on a single instance of UIView (or any of its subclasses). The identifier will identify the view in the information of each tracked event
/// \param view the view to be tracked
///
/// \param identifier Provides a unique custom identifier for the view, to be used in the events information
///
+ (void)trackView:(UIView * _Nonnull)view identifier:(NSString * _Nonnull)identifier;
/// Asks Draco to start tracking the user interaction on a single instance of UIView (or any of its subclasses). Custom identifier is not provided in this version of the function, so the eventInspector will use a default identifier. (It will be the accessibilityIdentifier of the view, if any, or its objectIdentifier as String. Keep in mind that if the object identifier is used, it will be unique for the entire life cycle of the view, but it will change every time the view is instantiated again
/// \param view the view to be tracked
///
+ (void)trackView:(UIView * _Nonnull)view;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@interface Draco (SWIFT_EXTENSION(DracoSDK))
/// Starts the Draco SDK. Call this method as early as possible to reduce latency on the first decision request. A client Id string is expected.
/// The SDK won’t work if this method is not called.
+ (void)startWithClientId:(NSString * _Nonnull)clientId;
@end







/// Draco Advertising Integrity
SWIFT_CLASS("_TtC8DracoSDK8DracoAds")
@interface DracoAds : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class DracoDecisionStatus;
@class NSNumber;

SWIFT_PROTOCOL("_TtP8DracoSDK12DracoProduct_")
@protocol DracoProduct
+ (void)decision;
/// Run a measurament wth client token
/// \param clientToken the <code>ClientToken</code>
///
+ (void)decisionWithClientToken:(NSDictionary<NSString *, id> * _Nullable)clientToken;
+ (void)decisionWithClientToken:(NSDictionary<NSString *, id> * _Nullable)clientToken statusHandler:(void (^ _Nullable)(DracoDecisionStatus * _Nonnull))statusHandler;
+ (void)activeDecisionWithClientToken:(NSDictionary<NSString *, id> * _Nullable)clientToken statusHandler:(void (^ _Nullable)(DracoDecisionStatus * _Nonnull))statusHandler;
+ (void)attachDecisionToView:(UIView * _Nonnull)view;
+ (void)attachDecisionToView:(UIView * _Nonnull)view clientToken:(NSDictionary<NSString *, id> * _Nullable)ct;
+ (void)attachActiveDecisionToView:(UIView * _Nonnull)view clientToken:(NSDictionary<NSString *, id> * _Nullable)ct;
+ (void)attachActiveDecisionToView:(UIView * _Nonnull)view;
+ (void)detachDecisionFromView:(UIView * _Nonnull)view;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isActive;)
+ (BOOL)isActive SWIFT_WARN_UNUSED_RESULT;
@end


@interface DracoAds (SWIFT_EXTENSION(DracoSDK)) <DracoProduct>
+ (void)attachDecisionToView:(UIView * _Nonnull)view;
+ (void)attachDecisionToView:(UIView * _Nonnull)view clientToken:(NSDictionary<NSString *, id> * _Nullable)ct;
+ (void)attachActiveDecisionToView:(UIView * _Nonnull)view;
+ (void)attachActiveDecisionToView:(UIView * _Nonnull)view clientToken:(NSDictionary<NSString *, id> * _Nullable)ct;
+ (void)detachDecisionFromView:(UIView * _Nonnull)view;
+ (void)decision;
+ (void)decisionWithClientToken:(NSDictionary<NSString *, id> * _Nullable)clientToken;
+ (void)decisionWithClientToken:(NSDictionary<NSString *, id> * _Nullable)clientToken statusHandler:(void (^ _Nullable)(DracoDecisionStatus * _Nonnull))statusHandler;
+ (void)activeDecisionWithClientToken:(NSDictionary<NSString *, id> * _Nullable)clientToken statusHandler:(void (^ _Nullable)(DracoDecisionStatus * _Nonnull))statusHandler;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isActive;)
+ (BOOL)isActive SWIFT_WARN_UNUSED_RESULT;
@end


/// Draco Application Integrity
SWIFT_CLASS("_TtC8DracoSDK8DracoApp")
@interface DracoApp : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@interface DracoApp (SWIFT_EXTENSION(DracoSDK)) <DracoProduct>
+ (void)attachDecisionToView:(UIView * _Nonnull)view;
+ (void)attachDecisionToView:(UIView * _Nonnull)view clientToken:(NSDictionary<NSString *, id> * _Nullable)ct;
+ (void)attachActiveDecisionToView:(UIView * _Nonnull)view;
+ (void)attachActiveDecisionToView:(UIView * _Nonnull)view clientToken:(NSDictionary<NSString *, id> * _Nullable)ct;
+ (void)detachDecisionFromView:(UIView * _Nonnull)view;
+ (void)decision;
+ (void)decisionWithClientToken:(NSDictionary<NSString *, id> * _Nullable)clientToken;
+ (void)decisionWithClientToken:(NSDictionary<NSString *, id> * _Nullable)clientToken statusHandler:(void (^ _Nullable)(DracoDecisionStatus * _Nonnull))statusHandler;
+ (void)activeDecisionWithClientToken:(NSDictionary<NSString *, id> * _Nullable)clientToken statusHandler:(void (^ _Nullable)(DracoDecisionStatus * _Nonnull))statusHandler;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isActive;)
+ (BOOL)isActive SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP8DracoSDK21DracoDecisionDelegate_")
@protocol DracoDecisionDelegate
@optional
- (void)dracoAttachedActiveDecisionDidCollectPayloadForView:(UIView * _Nonnull)view product:(NSString * _Nonnull)product clientToken:(NSDictionary<NSString *, id> * _Nullable)ct sessionId:(NSString * _Nullable)sessionId dataToken:(NSString * _Nullable)dataToken payload:(NSString * _Nullable)payload;
- (void)dracoAttachedDecisionDidCompleteForView:(UIView * _Nonnull)view product:(NSString * _Nonnull)product clientToken:(NSDictionary<NSString *, id> * _Nullable)ct;
- (void)dracoAttachedDecisionDidFailForView:(UIView * _Nonnull)view product:(NSString * _Nonnull)product clientToken:(NSDictionary<NSString *, id> * _Nullable)ct error:(NSError * _Nonnull)error;
///
- (void)dracoDidAttachDecisionToView:(UIView * _Nonnull)view product:(NSString * _Nonnull)product clientToken:(NSDictionary<NSString *, id> * _Nullable)ct;
- (void)dracoDidFailAttachingDecisionToView:(UIView * _Nonnull)view product:(NSString * _Nonnull)product clientToken:(NSDictionary<NSString *, id> * _Nullable)ct error:(NSError * _Nonnull)error;
@end

/// Represent the state pof a decision
typedef SWIFT_ENUM(NSInteger, DracoDecisionState, open) {
/// Status value for when a decision is complete (all data sent to servers)
  DracoDecisionStateCOMPLETE = 0,
/// Status value for when an error ocurred and the decision could not be completed
  DracoDecisionStateERROR = 1,
/// Status value for when the signals gathering phase of a decision is complete
  DracoDecisionStatePAYLOAD_COLLECTED = 2,
};


/// Represent the status of a decision
SWIFT_CLASS("_TtC8DracoSDK19DracoDecisionStatus")
@interface DracoDecisionStatus : NSObject
/// Status of the decision
@property (nonatomic, readonly) enum DracoDecisionState state;
/// Product associated with the decision.
@property (nonatomic, readonly, copy) NSString * _Nonnull product;
@property (nonatomic, readonly, copy) NSString * _Nullable sessionId;
@property (nonatomic, readonly, copy) NSString * _Nullable dataToken;
@property (nonatomic, readonly, copy) NSString * _Nullable payload;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable clientToken;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represent the state of the inspector
typedef SWIFT_ENUM(NSInteger, DracoInspectorState, open) {
/// This is the initial Draco state
  DracoInspectorStateINACTIVE = 0,
/// Set after the start method is called
  DracoInspectorStateSTARTING = 1,
/// After Draco has successfully started
  DracoInspectorStateREADY = 2,
/// When a decision is in progress
  DracoInspectorStateWORKING = 3,
/// After calling the kill method. It’s not possible to return from this state without restarting the app
  DracoInspectorStateKILLED = 4,
};


SWIFT_CLASS("_TtC8DracoSDK20DracoInspectorStatus")
@interface DracoInspectorStatus : NSObject <NSCopying>
@property (nonatomic, readonly) enum DracoInspectorState state;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Draco Marketing Integrity
SWIFT_CLASS("_TtC8DracoSDK8DracoMkt")
@interface DracoMkt : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@interface DracoMkt (SWIFT_EXTENSION(DracoSDK)) <DracoProduct>
+ (void)attachDecisionToView:(UIView * _Nonnull)view;
+ (void)attachDecisionToView:(UIView * _Nonnull)view clientToken:(NSDictionary<NSString *, id> * _Nullable)ct;
+ (void)attachActiveDecisionToView:(UIView * _Nonnull)view;
+ (void)attachActiveDecisionToView:(UIView * _Nonnull)view clientToken:(NSDictionary<NSString *, id> * _Nullable)ct;
+ (void)detachDecisionFromView:(UIView * _Nonnull)view;
+ (void)decision;
+ (void)decisionWithClientToken:(NSDictionary<NSString *, id> * _Nullable)clientToken;
+ (void)decisionWithClientToken:(NSDictionary<NSString *, id> * _Nullable)clientToken statusHandler:(void (^ _Nullable)(DracoDecisionStatus * _Nonnull))statusHandler;
+ (void)activeDecisionWithClientToken:(NSDictionary<NSString *, id> * _Nullable)clientToken statusHandler:(void (^ _Nullable)(DracoDecisionStatus * _Nonnull))statusHandler;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isActive;)
+ (BOOL)isActive SWIFT_WARN_UNUSED_RESULT;
@end







#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
